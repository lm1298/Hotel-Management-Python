class Room:
    """
    create Room information for hotel management project.
    """

    def __init__(self, room_number, room_type, occupancy, price):
        """
        initial constructor for room class.

        :param room_number: int, room number
        :param room_type: str, type of room
        :param occupancy: int, number of people that can stay in room
        :param price: int, price of the room per day
        """
        self.room_number = room_number
        self.room_type = room_type
        self.occupancy = occupancy
        self.price = price
        self.reservations = []

    def check_availability(self, checkin_date, checkout_date):
        """
        Check for the availability of room .

        :param checkin_date: str, checkin date
        :param checkout_date: str, checkout date
        :return: boolean , true or false
        """
        # Iterate through each reservation for this room
        for reservation in self.reservations:
            # If the reservation overlaps with the specified dates, the room is not available
            if (checkin_date < reservation.checkout_date) and (checkout_date > reservation.checkin_date):
                return False
        # If no reservations overlap with the specified dates, the room is available
        return True

    def book_room(self, checkin_date, checkout_date):
        """
        book a particular room .
        :param checkin_date: str, checkin date
        :param checkout_date: str, checkout date
        """
        if not self.check_availability(checkin_date, checkout_date):
            print(f"Room {self.room_number} is not available.")
        else:
            reservation = Reservation(self, checkin_date, checkout_date)
            self.reservations.append(reservation)
            print(f"Room {self.room_number} has been booked.")

    def cancel_reservation(self, reservation):
        """Cancel a reservation for the room."""
        if reservation in self.reservations:
            self.reservations.remove(reservation)
            print("Reservation cancelled.")
        else:
            print("Reservation not found.")

    def get_reservations(self):
        """Get the list of reservations for the room."""
        return self.reservations

    def get_revenue(self):
        """Get the total revenue generated by the room."""
        revenue = 0
        for reservation in self.reservations:
            revenue += reservation.get_total_price()
        return revenue

    def update_price(self, new_price):
        """Update the price of the room."""
        self.price = new_price
        print("Price updated.")

    def update_occupancy(self, new_occupancy):
        """Update the occupancy of the room."""
        self.occupancy = new_occupancy
        print("Occupancy updated.")

    def __str__(self):
        """string representation of room information"""
        return f"Room {self.room_number}, Type: {self.room_type}," \
               f" Occupancy: {self.occupancy}, Price: {self.price},"
